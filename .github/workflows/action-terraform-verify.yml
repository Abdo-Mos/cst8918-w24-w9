name: Validate terraform fmt
on:
  pull_request:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    name: terraform fmt check
    outputs:
      CHECK_STATUS: "${{ env.CHECK_STATUS }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch changed files
        id: pr_files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "space-delimited"
      - name: Configure terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
      - name: Validate terraform fmt (added_modified)
        run: |
          set +e

          echo "CHECK_STATUS=0" >> $GITHUB_ENV

          for changed_file in ${{ steps.pr_files.outputs.added_modified }}; do
            echo "Checking terraform fmt on ${changed_file}..."

            if [[ $changed_file == *.tf ]]; then
              terraform fmt -check $changed_file
              FMT_STATUS=$(echo $?)

              if [[ $FMT_STATUS -ne 0 ]]; then
                echo "❌ terraform fmt failed - ${changed_file}" >> $GITHUB_STEP_SUMMARY
                echo "CHECK_STATUS=1" >> $GITHUB_ENV
              fi
            fi
          done
      - name: Check Terraform formatting
        id: fmt
        run: |
          set +e # Do not exit immediately on error
          fmt_output=$(terraform fmt -check -recursive)
          if [ "$?" -ne 0 ]; then
            echo "::error::Terraform files need to be formatted. Run 'terraform fmt -recursive' locally to fix formatting issues."
            echo "Formatting errors in files:"
            echo "$fmt_output"
            exit 1
          else
            echo "All Terraform files are formatted correctly."

      # - name: Install tfsec
      #   run: |
      #     curl https://raw.githubusercontent.com/tfsec/tfsec/master/scripts/install_linux.sh 

      # - name: Terraform Security Scan with tfsec
      #   run: |
      #     set +e
      #     echo "CHECK_STATUS=0" >> $GITHUB_ENV

      #     for changed_file in ${{ steps.pr_files.outputs.added_modified }}; do
      #       if [[ $changed_file == *.tf ]]; then
      #         echo "Running tfsec on ${changed_file}..."
      #         tfsec $changed_file
      #         TFSEC_STATUS=$(echo $?)

      #         if [[ $TFSEC_STATUS -ne 0 ]]; then
      #           echo "❌ tfsec security scan issues found - ${changed_file}" >> $GITHUB_STEP_SUMMARY
      #           echo "CHECK_STATUS=1" >> $GITHUB_ENV
      #         fi
      #       fi
      #     done
      - name: Process check
        if: always()
        run: exit $CHECK_STATUS
